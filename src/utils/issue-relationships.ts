import { Version2Client } from "jira.js/version2";

export interface RelatedIssue {
    key: string;
    summary: string;
    status: string;
    type: string;
    url: string;
    priority?: string;
}

export interface IssueStructure {
    current: RelatedIssue;
    parent?: RelatedIssue;
    epic?: RelatedIssue;
    subtasks: RelatedIssue[];
    siblings: RelatedIssue[];
    epicStories: RelatedIssue[]; // –í—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–ø–∏–∫–∞
}

/**
 * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è —Ç–∏–∫–µ—Ç–∞ Jira
 */
function createJiraUrl(host: string, issueKey: string): string {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º https
    const cleanHost = host.replace(/^https?:\/\//, "");
    return `https://${cleanHost}/browse/${issueKey}`;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Jira issue –≤ RelatedIssue
 */
function convertToRelatedIssue(issue: any, host: string): RelatedIssue {
    return {
        key: issue.key,
        summary: issue.fields?.summary || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        status: issue.fields?.status?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        type: issue.fields?.issuetype?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        url: createJiraUrl(host, issue.key),
        priority: issue.fields?.priority?.name,
    };
}

/**
 * –ò—â–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ (Stories) —ç–ø–∏–∫–∞ —á–µ—Ä–µ–∑ JQL –ø–æ–∏—Å–∫
 */
async function searchEpicStories(
    jira: Version2Client,
    epicKey: string,
    host: string
): Promise<RelatedIssue[]> {
    try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ Epic Link
        const jqlQueries = [
            `"Epic Link" = ${epicKey}`,
            `cf[10014] = ${epicKey}`, // customfield_10014
            `cf[10006] = ${epicKey}`, // customfield_10006
            `project = ${epicKey.split("-")[0]} AND text ~ "${epicKey}"`, // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤ –ø—Ä–æ–µ–∫—Ç–µ
        ];

        for (const jql of jqlQueries) {
            try {
                const searchResults =
                    await jira.issueSearch.searchForIssuesUsingJql({
                        jql: jql,
                        fields: [
                            "key",
                            "summary",
                            "status",
                            "issuetype",
                            "priority",
                        ],
                        maxResults: 50,
                        startAt: 0,
                    });

                if (searchResults.issues && searchResults.issues.length > 0) {
                    return searchResults.issues.map((issue: any) =>
                        convertToRelatedIssue(issue, host)
                    );
                }
            } catch (error) {
                console.error(`JQL query failed: ${jql}`, error);
                continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
            }
        }

        return [];
    } catch (error) {
        console.error("Error searching epic stories:", error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ç–∏–∫–µ—Ç–∞
 */
export async function getIssueStructure(
    jira: Version2Client,
    issueKey: string,
    host: string
): Promise<IssueStructure> {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–∫–µ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const issue = await jira.issues.getIssue({
        issueIdOrKey: issueKey,
        expand: ["parent", "subtasks", "issuelinks"],
        fields: ["*all"],
    });

    const current = convertToRelatedIssue(issue, host);
    const structure: IssueStructure = {
        current,
        subtasks: [],
        siblings: [],
        epicStories: [],
    };

    // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ (–ø–æ–ª—É—á–∞–µ–º —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ —Å—Ä–∞–∑—É)
    let parentIssueWithSubtasks: any = null;
    if (issue.fields?.parent) {
        structure.parent = convertToRelatedIssue(issue.fields.parent, host);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
        try {
            parentIssueWithSubtasks = await jira.issues.getIssue({
                issueIdOrKey: structure.parent.key,
                expand: ["subtasks"],
                fields: ["subtasks", "*all"],
            });
        } catch (error) {
            console.error("Error fetching parent with subtasks:", error);
        }
    }

    // –ü–æ–¥–∑–∞–¥–∞—á–∏
    if (issue.fields?.subtasks && Array.isArray(issue.fields.subtasks)) {
        structure.subtasks = issue.fields.subtasks.map((subtask: any) =>
            convertToRelatedIssue(subtask, host)
        );
    }

    // –ü–æ–∏—Å–∫ —ç–ø–∏–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
    let epicField = findEpicField(issue.fields);

    // –ï—Å–ª–∏ —ç–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ, –∏—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
    if (!epicField && parentIssueWithSubtasks) {
        epicField = findEpicField(parentIssueWithSubtasks.fields);
    }

    if (epicField) {
        try {
            if (typeof epicField === "string") {
                // Epic key –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                const epicIssue = await jira.issues.getIssue({
                    issueIdOrKey: epicField,
                    fields: ["summary", "status", "issuetype", "priority"],
                });
                structure.epic = convertToRelatedIssue(epicIssue, host);
            } else if (epicField.key) {
                // Epic –∫–∞–∫ –æ–±—ä–µ–∫—Ç
                structure.epic = convertToRelatedIssue(epicField, host);
            } else if (epicField.epicName) {
                // –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ø–∏–∫–∞, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ JQL
                const projectKey =
                    issue.fields?.project?.key || issueKey.split("-")[0];
                const searchResults =
                    await jira.issueSearch.searchForIssuesUsingJql({
                        jql: `project = "${projectKey}" AND issuetype = Epic AND summary ~ "${epicField.epicName}"`,
                        fields: [
                            "key",
                            "summary",
                            "status",
                            "issuetype",
                            "priority",
                        ],
                        maxResults: 1,
                        startAt: 0,
                    });

                if (searchResults.issues && searchResults.issues.length > 0) {
                    structure.epic = convertToRelatedIssue(
                        searchResults.issues[0],
                        host
                    );
                }
            }
        } catch (error) {
            console.error("Error fetching epic:", error);
        }
    }

    // –≠–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ —ç–ø–∏–∫–∞

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —ç–ø–∏–∫, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏
    if (structure.epic) {
        try {
            const epicStories = await searchEpicStories(
                jira,
                structure.epic.key,
                host
            );
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–ø–∏–∫–∞, –∏—Å–∫–ª—é—á–∞—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            structure.epicStories = epicStories.filter(
                (story) => story.key !== structure.current.key
            );
        } catch (error) {
            console.error("Error fetching epic stories:", error);
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (—Å–∏–±–ª–∏–Ω–≥–∏) –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (
        parentIssueWithSubtasks?.fields?.subtasks &&
        Array.isArray(parentIssueWithSubtasks.fields.subtasks)
    ) {
        structure.siblings = parentIssueWithSubtasks.fields.subtasks
            .filter((subtask: any) => subtask.key !== issueKey) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            .map((subtask: any) => convertToRelatedIssue(subtask, host));
    }

    return structure;
}

/**
 * –ò—â–µ—Ç –ø–æ–ª–µ Epic Link –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
 */
function findEpicField(fields: any): any {
    // –û–±—ã—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã Epic Link –ø–æ–ª–µ–π
    const epicFields = [
        "customfield_10014", // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ Epic Link
        "customfield_10006", // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        "customfield_10007", // Epic Name
        "epic",
        "epicLink",
    ];

    for (const fieldName of epicFields) {
        const fieldValue = fields[fieldName];
        if (fieldValue) {
            // –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —ç–ø–∏–∫–∞

            // –ï—Å–ª–∏ —ç—Ç–æ Epic Name, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ø–∏–∫
            if (
                fieldName === "customfield_10007" &&
                typeof fieldValue === "string"
            ) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ø–∏–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                return { epicName: fieldValue };
            }

            return fieldValue;
        }
    }

    return null;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
export function formatIssueStructure(structure: IssueStructure): string {
    let result = `## üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n\n`;

    // –≠–ø–∏–∫
    if (structure.epic) {
        result += `### üéØ **–≠–ü–ò–ö**\n`;
        result += `**[${structure.epic.key}: ${structure.epic.summary}](${structure.epic.url})**\n`;
        result += `- **–¢–∏–ø:** ${structure.epic.type}\n`;
        result += `- **–°—Ç–∞—Ç—É—Å:** ${structure.epic.status}\n`;
        if (structure.epic.priority) {
            result += `- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${structure.epic.priority}\n`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–ø–∏–∫–∞
        if (structure.epicStories.length > 0) {
            result += `\n#### üìö **–ò—Å—Ç–æ—Ä–∏–∏ —ç–ø–∏–∫–∞** (${structure.epicStories.length})\n`;
            structure.epicStories.forEach((story, index) => {
                const statusIcon = getStatusIcon(story.status);
                result += `${index + 1}. **[${story.key}: ${story.summary}](${
                    story.url
                })**\n`;
                result += `   - **–°—Ç–∞—Ç—É—Å:** ${statusIcon} ${story.status} | **–¢–∏–ø:** ${story.type}\n`;
            });
        }

        result += `\n---\n\n`;
    }

    // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞
    if (structure.parent) {
        result += `### üìö **–†–û–î–ò–¢–ï–õ–¨–°–ö–ê–Ø –ó–ê–î–ê–ß–ê**\n`;
        result += `**[${structure.parent.key}: ${structure.parent.summary}](${structure.parent.url})**\n`;
        result += `- **–¢–∏–ø:** ${structure.parent.type}\n`;
        result += `- **–°—Ç–∞—Ç—É—Å:** ${structure.parent.status}\n`;
        if (structure.parent.priority) {
            result += `- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${structure.parent.priority}\n`;
        }
        result += `\n---\n\n`;
    }

    // –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
    result += `### üéØ **–¢–ï–ö–£–©–ê–Ø –ó–ê–î–ê–ß–ê**\n`;
    result += `**[${structure.current.key}: ${structure.current.summary}](${structure.current.url})**\n`;
    result += `- **–¢–∏–ø:** ${structure.current.type}\n`;
    result += `- **–°—Ç–∞—Ç—É—Å:** ${structure.current.status}\n`;
    if (structure.current.priority) {
        result += `- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** ${structure.current.priority}\n`;
    }

    // –°–∏–±–ª–∏–Ω–≥–∏ (–¥—Ä—É–≥–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏)
    if (structure.siblings.length > 0) {
        result += `\n### üîó **–°–í–Ø–ó–ê–ù–ù–´–ï –ü–û–î–ó–ê–î–ê–ß–ò** (${structure.siblings.length})\n`;
        structure.siblings.forEach((sibling, index) => {
            const statusIcon = getStatusIcon(sibling.status);
            result += `${index + 1}. **[${sibling.key}: ${sibling.summary}](${
                sibling.url
            })**\n`;
            result += `   - **–°—Ç–∞—Ç—É—Å:** ${statusIcon} ${sibling.status} | **–¢–∏–ø:** ${sibling.type}\n`;
        });
        result += `\n`;
    }

    // –ü–æ–¥–∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    if (structure.subtasks.length > 0) {
        result += `### üîß **–ü–û–î–ó–ê–î–ê–ß–ò** (${structure.subtasks.length})\n`;
        structure.subtasks.forEach((subtask, index) => {
            const statusIcon = getStatusIcon(subtask.status);
            result += `${index + 1}. **[${subtask.key}: ${subtask.summary}](${
                subtask.url
            })**\n`;
            result += `   - **–°—Ç–∞—Ç—É—Å:** ${statusIcon} ${subtask.status} | **–¢–∏–ø:** ${subtask.type}\n`;
        });
    }

    return result;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusIcon(status: string): string {
    const lowerStatus = status.toLowerCase();

    if (
        lowerStatus.includes("–≥–æ—Ç–æ–≤–æ") ||
        lowerStatus.includes("–∑–∞–∫—Ä—ã—Ç") ||
        lowerStatus.includes("done") ||
        lowerStatus.includes("closed")
    ) {
        return "‚úÖ";
    }
    if (
        lowerStatus.includes("—Ä–∞–±–æ—Ç–µ") ||
        lowerStatus.includes("progress") ||
        lowerStatus.includes("—Ä–∞–∑—Ä–∞–±–æ—Ç")
    ) {
        return "üîÑ";
    }
    if (lowerStatus.includes("review") || lowerStatus.includes("—Ä–µ–≤—å—é")) {
        return "üëÅÔ∏è";
    }
    if (lowerStatus.includes("release") || lowerStatus.includes("—Ä–µ–ª–∏–∑")) {
        return "üöÄ";
    }
    if (lowerStatus.includes("test") || lowerStatus.includes("—Ç–µ—Å—Ç")) {
        return "üß™";
    }

    return "üìã"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}
